ls --> list the files/directory
ls -ltr--> list with permessions they have.
mkdir <name> --> make/create directory
cd <name> --> change to that given directory 
touch <filename.extension> --> creates a filename, you can also mention multiple filenames to create multiple files.
nano <filename.ext> --> open a GUI kind for editing the file, if the file doesn't exist it can also create a file.
cat <filename.ext> --> reads the content in the filename
cd ../ --> moves one step backward from present directory.
cd ../ ../ --> moves 2 steps behind to the present path.
cd --> comes to home directory from any path.
rm <filename.ext> --> removes that specific file.
rmdir <directory/folder> --> deletes the empty directory.
rmdir -r <directory> --> removes the directory, if it has some files inside it.
cp <file> <directory>/ --> copies file into the mentioned directory.
mv <file> <directory>/ --> moves the file into mentioned directory.
mv <file> ~/ --> Moves the file to the homedirctories into all the directories
mv <file> ~/<folder>/ --> Moves the file to that specific directory in home.
clear --> clears all the contents
mv <file> <newfile> --> moves the file into newfile and then clears the old file as it renamed.
man mv --> Gives the manual command for any command, here we used for mv command.

How to install Packages:

apt is package manager for Ubuntu. apt-get 
For Amazon linuc CLI "YUM" is used.

In Ubuntu: 

apt install <packageName> --> Installs the package from your account.
sudo apt install <Packagename> --> Installs it using the root account.
sudo apt update --> Updates all the pacakges we have
sudo apt upgrade --> Upgrades all the packages we have
sudo apt purge --> Delete any of the pacakges.
sudo apt purge git --> Deletes the git package.

Connect to an EC2 instance:

From terminal:

ssh -i harsha.pem ubuntu@public_IP_address (helps us to remote login into server from local machine)


pwd --> present working directory.
whoami --> current user
sudo su --> current user to root user 
history --> gives all the commands used in active terminal.
git --version: gives the version of git
which docker --> Gives the path of docker
sudo apt update git --> updates git
date --> tells you the current date.

Vim: It is similar to nano, you could also use vim to edit the file.

vi <file> --> Inside the esiting file you have to start with I and then after finishing you have to press escape + I = Insert mode and so you could type something, then a colon symbol appers.

qa! --> exit without saving.
wq --> save and exit.

NETWORK COMMANDS:

ping google.com --> check if particular site is up or not. Checks if there is connection between servers.
ip addr --> gives our IP address.
nslookup google.com --> gives the data of name, ip address.

curl https://www.google.com --> we can see the whole page, in html foem.
curl https://aws.amazon.com --> Gives the whole page, in html form, to have information and context of it.

wget --> download the files.
wget https://www.python.org/ftp --> It download the package/image that is given in link.


Difference between bash and dash?

#!/bin/sh
#!/bin/bash
#!/bin/dash
#!/bin/ksh


./ <file.ext> --> to execute a file
sh <file.ext> --> file gets executed, but you will get denied as it doesn't know who has access to execute file.

So we use command line, chmod this grants permessions.
ch --> change + mod 

What are permessions ?
It's basically divide into 3 parts
1) root (SU)
2) which group
3) What are your permessions

Using the numbers we categorize this permessions:
7 --> magic number (read, write and execute)

4 --> read
2 --> write
1 --> execute

Ex: chmod 444 (root 4, group 4, everyone 4)
    chmod 777 (root (read, write,execute); group (read, write,execute); everyone (read, write,execute))

User:  
Group: 
Everyone: 

To monitor the CPU/RAM how do we identify ?

for CPU you can use --> NPROC
for RAM you could use --> Free

Insted of there you could use TOP command.
It gives you all the informations of all processes, how much memory is used.

TOP --> which all processes are running on your account.

df --> For printing disk space
free --> for getting free memory on disk
nproc --> Analyzing no of cpu's.

To efficently write the script, we have 2 options 
1) Use echo command - It gived more info of the printing details

Ex: We have command df that displays disk space, in the shell script we could give it as 

echo "Print disk space"
df -h 

Ex2: We have command free/nproc displays the free memory in the disk/displays no-of CPU running.

echo "print the memory"
free -g

echo "prnit the no-of CPU"
nproc 

Using echo statement is not feasible all teh times.

2) So we use set execute mode in debug mode (set -x)

It will print the output eith the comment of each output. It will basically show the command and output.
it is always better use mix of set command and echo command.

you need to always write the comments in the script to have more understanding of the file.
-------------------------------------------------------------------------------------------------------------------------

How do you find how much processes are running 

ps -ef --> provides the list of all processes 
ps -ef | grep "amazon" --> Filters all the processes having amazon in the list.
getmeusernames | grep "sai" --> From the script getmeusernames, grep command hrlps in filtering the names eho has sai.
| --> sends the output of first command to second command


SCENARIO:

I will run a command date in terminal and | that to echo "today date is", what is the output and why ?

The o/p of the first command date is it gives the date 
the o/p of second command date | echo "the date is"  --> It only fives o/p as today date is because date is default command for shell scripting.
And also for any chnanesla such as stdin, stdout, stderr  --> Pipe command only takes the information from o/p from the previous command. If the information is send to stdin the pipe doesn't recive the info and so will not display the o/p.

awk --> It is powerful command, which is pattern scanning and processing language.
Ex: If you want to get only process ID's or somthing, or column we can use AWK command, what it does is it filter out the information.

GREP VS AWK:

Grep provides you the list of all columns/everything ftom given text.
AWK provides you the only required info, to retrive all the required information.

grep name <filename> -->  gives the string of words, which has text = "name"

If the example is: My name is Harsha.
grep name <filename> | awk -F " " '{print $4} --> It gives output as Harsha

When you write any sh file, you will mention below things mandatory.

#!/bin/bash

############

META DATA

Author: 
Date:
Description:
Version:
######################

set -x #debug mode

set -e #It exits the script, when there is an error.
If we have errorn in line 4 and we havent written the command set -e, it runs everything although there is error.
Lets assume we have a hierarcy of create a user, create a file and then add that username to the file. 
The above mentioned things should be in order, if something is missing and the remaining goes wrong because it would be depending onthat. So there won't be any point of writing script, so when there is an error we assume it to quit and help us.
The only drwaback is, it doesn't work along with pipe command, so we also need to set a command for that for efficent working along with pipe command.
It basically checks the last command 
ffghffhfjf | echo --> script gets passed
fgfgdhjjdgf | echo | jshdufyudch --> script gets failed.

set -o #pipefail.
